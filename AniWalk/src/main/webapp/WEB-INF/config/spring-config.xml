<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/images/**" location="/WEB-INF/images/" />
	<resources mapping="/static/**" location="/WEB-INF/static/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!-- ==============뷰리졸버에 대한 등록================================= -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>

	<!-- =====================db관련 작업============================== -->
	<beans:bean id="ds"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="jdbc/myspring" />
		<beans:property name="resourceRef" value="true" />
	</beans:bean>

	<!-- ======================어노테이션============================== -->
	<context:component-scan base-package="kr.pandorabox.aniwalk" />
	<context:component-scan base-package="main" />
	<aop:aspectj-autoproxy/>

	<!-- ======================tiles를 사용하기 위한 설정=================== -->
	<!-- 1. tiles설정파일 등록하기 -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/**/*-tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- 2. ViewResolver가 기본 jsp로 뷰를 생성하지 않고 tiles프레임워크를 통해서 뷰를 만들도록 뷰리졸버 등록하기 -->
	<beans:bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>

	<!-- ====================== mybatis를 사용하기 위한 설정 =================== -->
	<!-- mybatis와 spring을 연동하기 위해 필요한 객체 -->
	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="ds" />
		<beans:property name="configLocation"
			value="/WEB-INF/config/mybatis-config.xml" />
	</beans:bean>
	<!-- mybatis의 핵심클래스를 등록(spring jdbc의 JdbcTemplate과 동일한 작업) DB테이블을 CLRUD할 
		수 있는 기능을 제공 -->
	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory" />
	</beans:bean>
	
	<!-- ====================== 파일업로드 =================== -->
	<beans:bean id="multipartResolver"
			class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="4000000"/>	
	</beans:bean>
	
	<!-- =========aop를 이용한 선언적 트랜잭션의 처리============== -->
	<!-- 1. 트랜잭션 처리를 위해 제공하는 spring클래스를 등록 -->
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="ds"/>
	</beans:bean>
	<!-- 2. 1번에서 등록한 트랜잭션 처리 클래스를 advice로 등록 -->
	<tx:advice id="transactionAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<!-- 3. aop처리 -->
	<aop:config>
		<!-- 펫 프렌즈 신청 트랜잭션 처리 -->
		<aop:pointcut expression="execution(*
		 kr.pandorabox.aniwalk.walker.*.walkerApply(..))"
			 id="walkerApply"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="walkerApply"/>
	</aop:config>
	<aop:config>
		<!-- 모집글 작성 트랜잭션 처리 -->
		<aop:pointcut expression="execution(*
		 kr.pandorabox.aniwalk.walking.*.recruitInsertUpdate(..))"
			 id="recruitInsertUpdate"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="recruitInsertUpdate"/>
	</aop:config>
	
	<!-- 인터셉터 객체 생성 -->
	  
	<beans:bean id="LoginInterceptor" class="kr.pandorabox.aniwalk.LoginInterceptor">
	</beans:bean>
	
	<!-- Interceptor 설정 -->
	<interceptors>
	    <interceptor>
	        <mapping path="/owner/*"/>  
	        <mapping path="/walker/*"/>  
	        <mapping path="/manager/*"/>   
	        <exclude-mapping path="/resources/**"/>
	        <exclude-mapping path="/walker/index*.do"/>
	        <exclude-mapping path="/manager/index*.do"/>
	        <exclude-mapping path="/walker/*Check.do"/>
	        <exclude-mapping path="/walker/*auth*"/>
	        <beans:ref bean="LoginInterceptor"/>
	    </interceptor>
	</interceptors>
	
	<!-- 웹소켓 핸들러 -->
	<websocket:handlers>
		<websocket:mapping handler="myHandler" path="/chat"/>
		<websocket:handshake-interceptors>
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
	</websocket:handlers>
	
</beans:beans>
